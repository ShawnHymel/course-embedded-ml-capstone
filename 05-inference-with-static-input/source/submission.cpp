#include <stdio.h>

// Include the name of the Edge Impulse SDK library you imported. This will 
// switch between Arduino and computer (autograder) libraries as needed.
#ifdef ARDUINO
    #include <Arduino_LSM9DS1.h>
    #include <magic-wand-capstone_inferencing.h>
#else
    #include "edge-impulse-sdk/classifier/ei_run_classifier.h"
#endif

// Function declarations
void setup();
void loop();
static int get_signal_data(size_t offset, size_t length, float *out_ptr);

/*******************************************************************************
 * The code below can be used as a starting point for inference in Arduino
 */

// Include the name of the library you imported
#ifdef ARDUINO
  #include <magic-wand-capstone_inferencing.h>
#endif

// Settings
static const int debug_nn = false;

// Raw features copied from test sample (Edge Impulse > Model testing)
static float input_buf[] = {
    // Paste raw features here!
    -0.6100, -3.7600, 12.1600, -0.0100, -0.0600, 0.0400, -0.3500, -3.8200, 11.8500, 0.0000, -0.0400, 0.0400, -0.4200, -4.1100, 12.2600, 0.0200, -0.0300, 0.0500, -0.3500, -3.9300, 12.3700, 0.0200, -0.0100, 0.0600, -0.2800, -3.7200, 11.9100, 0.0000, 0.0100, 0.0600, -0.0600, -3.6300, 11.4000, 0.0000, 0.0300, 0.0600, 0.1600, -3.6000, 11.1800, 0.0000, 0.0200, 0.0600, 0.4100, -3.5900, 11.5500, 0.0000, -0.0100, 0.0500, 0.6400, -3.3400, 11.9300, -0.0100, 0.0000, 0.0400, 0.9600, -3.2200, 11.8200, -0.0200, 0.0100, 0.0300, 0.9700, -3.2300, 11.3700, -0.0200, 0.0300, 0.0200, 1.0300, -3.3600, 11.4100, -0.0100, 0.0300, 0.0000, 1.0300, -3.4400, 11.8900, 0.0000, 0.0100, -0.0100, 0.8700, -3.5200, 11.9500, 0.0100, 0.0300, -0.0200, 1.1000, -3.6400, 11.1900, 0.0100, 0.0500, -0.0300, 1.0600, -3.8500, 11.0100, 0.0300, 0.0400, -0.0400, 1.0100, -4.2200, 11.6200, 0.0500, 0.0100, -0.0400, 0.9200, -4.4100, 12.1300, 0.0500, 0.0000, -0.0400, 1.3300, -5.0800, 11.2600, 0.0500, 0.0400, -0.0300, 1.2700, -5.1300, 11.0100, 0.0600, 0.0400, -0.0100, 1.0400, -4.9000, 11.4500, 0.0700, 0.0200, 0.0100, 0.8900, -4.6300, 11.8200, 0.0700, 0.0100, 0.0300, 0.7400, -4.4400, 11.6200, 0.0700, 0.0400, 0.0300, 0.7800, -4.4800, 10.9400, 0.0700, 0.0600, 0.0400, 0.9700, -4.2400, 10.9800, 0.0700, 0.0500, 0.0500, 1.0100, -4.0600, 11.1000, 0.0600, 0.0400, 0.0500, 1.1300, -3.8600, 10.9600, 0.0500, 0.0400, 0.0500, 1.2900, -3.6000, 10.5500, 0.0300, 0.0400, 0.0500, 1.4300, -3.3800, 10.3600, 0.0300, 0.0100, 0.0400, 1.6200, -3.2200, 10.5300, 0.0400, 0.0000, 0.0300, 8.6100, -1.8200, 10.0100, 0.0600, -0.0400, 0.0300, 8.6200, -1.6500, 10.1300, 0.0600, -0.0500, 0.0300, 8.5300, -1.4900, 10.1200, 0.0700, -0.0500, 0.0200, 8.4800, -1.9200, 10.1200, 0.0700, -0.0500, 0.0200, 8.4100, -2.0800, 10.2800, 0.0700, -0.0500, 0.0200, 8.4300, -2.0400, 10.3600, 0.0700, -0.0500, 0.0200, 8.3800, -1.9500, 10.3600, 0.0600, -0.0500, 0.0200, 8.3600, -1.9400, 10.2700, 0.0600, -0.0400, 0.0200, 8.2200, -1.9600, 10.0700, 0.0600, -0.0400, 0.0200, 8.1700, -2.0500, 10.1000, 0.0600, -0.0400, 0.0200, 8.1500, -2.2000, 10.2600, 0.0700, -0.0500, 0.0200, 8.0800, -2.3800, 10.3600, 0.0700, -0.0500, 0.0200, 8.0800, -2.4100, 10.3500, 0.0600, -0.0400, 0.0300, 8.0800, -1.7000, 10.1900, 0.0600, -0.0400, 0.0400, 7.9900, -1.6900, 10.1800, 0.0600, -0.0400, 0.0400, 7.9400, -1.7900, 10.2600, 0.0600, -0.0400, 0.0300, 7.9500, -1.9100, 10.3400, 0.0600, -0.0400, 0.0200, 7.9700, -2.0500, 10.2800, 0.0700, -0.0400, 0.0200, 8.0100, -2.0700, 10.1200, 0.0600, -0.0300, 0.0300, 7.9500, -1.6000, 9.7400, 0.0600, -0.0300, 0.0300, 7.9700, -1.4800, 9.5500, 0.0600, -0.0300, 0.0300, 8.0100, -1.5400, 9.1800, 0.0600, -0.0300, 0.0200, 7.9400, -1.6300, 8.9000, 0.0600, -0.0400, 0.0200, 7.8300, -1.6700, 8.9400, 0.0700, -0.0600, 0.0100, 7.6200, -1.6600, 8.7300, 0.0700, -0.0700, 0.0100, 7.4400, -1.6300, 8.1700, 0.0600, -0.0700, 0.0100, 7.0200, -1.6600, 7.6500, 0.0700, -0.0700, 0.0000, 6.8600, -1.7300, 7.1700, 0.0600, -0.0800, 0.0000, 6.8300, -1.6300, 6.6900, 0.0500, -0.1200, 0.0000, 6.6400, -0.8900, 5.7000, 0.0600, -0.1800, 0.0100, 6.3400, -0.3100, 5.0800, 0.0600, -0.2000, 0.0100, 5.9500, 0.0800, 4.4000, 0.0600, -0.2100, 0.0100, 5.5600, 0.0700, 3.6900, 0.0600, -0.2500, -0.0100, 5.0900, -0.2500, 2.8600, 0.0900, -0.3100, -0.0400, 4.6500, -0.9400, 3.1400, 0.1700, -0.5000, -0.0900, 3.5200, -2.8400, 2.5900, 0.2100, -0.5400, -0.0700, 3.2100, -3.1700, 2.1900, 0.2300, -0.5700, -0.0600, 2.9600, -4.2200, 1.7300, 0.2300, -0.6100, -0.0800, 2.8200, -4.7000, 1.4300, 0.2300, -0.6700, -0.1300, 2.0600, -4.4500, 1.4300, 0.1800, -0.8500, -0.2200, 1.3100, -7.2900, 2.0400, 0.1800, -0.9300, -0.0600, 0.4800, -6.9000, 2.9700, 0.1500, -1.0300, 0.0200, -0.0600, -8.1900, 4.0900, 0.1400, -1.1200, 0.0000, -0.5900, -10.6900, 5.4600, 0.1000, -1.2300, -0.0600, -1.4200, -12.1600, 6.6300, 0.0700, -1.3100, -0.0100, -2.7000, -14.5000, 9.0900, 0.0500, -1.3700, 0.2100, -2.9000, -13.0100, 9.9900, 0.0500, -1.3600, 0.4000, -2.9000, -12.0100, 10.7500, 0.0600, -1.3500, 0.5200, -3.6200, -11.0500, 10.9800, 0.0600, -1.3500, 0.5800, -3.9900, -10.6700, 12.0500, 0.0700, -1.4100, 0.6100, -4.6000, -10.5000, 13.9300, 0.1100, -1.4700, 0.6800, -5.4100, -10.2700, 15.0400, 0.0800, -1.5000, 0.7300, -6.1300, -10.5000, 15.8800, 0.0000, -1.5100, 0.7400, -6.8900, -10.2900, 16.5400, -0.1000, -1.5000, 0.7700, -7.4900, -10.3700, 17.6300, -0.2000, -1.5200, 0.8000, -7.6400, -10.7000, 18.5400, -0.3900, -1.5700, 0.8600, -9.9100, -8.2400, 19.2700, -0.4600, -1.5600, 0.8300, -11.6400, -12.1200, 22.4700, -0.6000, -1.6300, 0.7900, -10.8800, -11.5900, 25.6200, -0.6600, -1.5500, 1.0000, -11.9700, -7.4300, 26.2100, -0.7100, -1.2900, 1.2700, -12.9900, -4.0500, 26.2500, -0.8200, -0.7600, 1.4000, -12.6600, -0.9800, 25.0100, -0.8300, -0.5400, 1.3500, -13.1800, -1.2300, 25.1200, -0.8200, -0.4600, 1.2800, -13.1800, -0.7300, 26.2100, -0.7700, -0.4200, 1.2500, -12.9500, -0.4300, 27.7300, -0.7100, -0.3700, 1.2700, -12.9700, -0.4000, 29.2200, -0.6900, -0.2700, 1.2800, -12.9000, 2.3900, 28.4600, -0.6700, 0.2300, 1.3000, -12.6600, 4.5000, 26.6600, -0.6700, 0.4800, 1.3200, -12.1300, 5.5800, 25.9200, -0.6500, 0.6300, 1.3300, -11.3000, 5.7400, 25.8200, -0.5900, 0.7100, 1.3200, -10.8600, 5.8500, 25.7000, -0.5400, 0.8100, 1.3000, -10.7600, 6.3700, 25.0500, -0.4700, 1.0700, 1.1300, -10.9800, 5.8300, 23.7300, -0.4600, 1.2300, 1.0200, -10.5800, 6.3100, 23.1200, -0.4200, 1.3300, 0.9800, -10.4400, 6.7000, 20.9800, -0.4400, 1.5200, 0.9800, -11.0400, 7.8500, 18.8500, -0.4500, 1.6700, 1.0000, -11.3000, 9.3600, 17.5800, -0.4300, 1.7300, 1.0200, -11.6900, 12.2700, 14.9700, -0.4200, 1.7800, 1.0200, -12.0700, 15.4600, 11.5300, -0.3900, 1.8100, 1.0100, -10.7900, 17.3800, 9.9500, -0.2900, 1.6800, 0.8700, -10.4200, 16.5500, 9.7700, -0.1400, 1.5000, 0.5200, -8.7500, 14.5700, 9.5400, -0.0500, 1.5600, 0.2000, -7.0500, 13.3200, 9.1800, 0.0600, 1.8100, 0.2500, -6.9000, 13.9300, 5.5100, 0.0300, 2.0400, 0.2200, -5.4100, 11.6300, 2.4500, 0.0700, 2.0100, 0.0600, -3.9900, 9.4100, 2.2700, 0.1300, 1.7400, -0.0500, -2.9000, 8.9300, 4.0500, 0.1900, 1.5000, -0.0500, -1.1400, 7.4200, 3.4700, 0.2000, 1.4800, -0.1000, -0.5200, 6.6200, 2.0000, 0.1900, 1.5200, -0.1300, 0.0100, 6.4000, 0.6900, 0.1900, 1.5300, -0.1300, 0.7300, 6.2300, -0.2600, 0.1800, 1.4700, -0.1200, 1.2400, 6.1200, -0.8500, 0.1600, 1.3700, -0.1100, 1.4300, 6.6100, -1.1100, 0.1400, 1.1600, -0.1000, 1.9200, 7.5800, -0.9400, 0.1200, 1.0900, -0.1500, 2.2400, 7.5500, -1.4700, 0.0900, 1.0400, -0.2100, 2.5200, 7.5500, -2.1800, 0.0500, 0.9800, -0.2700, 2.8400, 7.5000, -2.9400, 0.0100, 0.9200, -0.3300, 3.0500, 7.5000, -3.5600, 0.0000, 0.7300, -0.4300, 3.6600, 8.2800, -3.2500, 0.0000, 0.6400, -0.4800, 3.3800, 7.9300, -3.6800, -0.0100, 0.5700, -0.5500, 2.8700, 8.1900, -3.6500, 0.0100, 0.4800, -0.6000, 2.9600, 9.1200, -3.2100, 0.0600, 0.3800, -0.6600, 2.6400, 9.4200, -2.9400, 0.0900, 0.3000, -0.8700, 2.0300, 7.6000, -2.1600, 0.1700, 0.1300, -1.0000, 1.9100, 5.3500, -1.0700, 0.1500, -0.0100, -1.1300, 2.0600, 2.7000, 0.0100, 0.0500, -0.1500, -1.2300, 2.3100, 0.3800, 0.3400, -0.1200, -0.2600, -1.2700, 2.7500, -0.6800, 0.5400, -0.2800, -0.3500, -1.2300, 2.9400, 1.9600, 1.2300, -0.4600, -0.4900, -1.0400, 2.3300, 3.6700, 0.5700, -0.5000, -0.5000, -0.9900, 1.5900, 5.8300, 0.3900, -0.4600, -0.5300, -0.9700, 1.0100, 7.7600, 0.9100, -0.3200, -0.6000, -1.0100, 0.2700, 6.9000, 2.3200, -0.1900, -0.6900, -1.1600, -0.0300, 3.4800, 3.7600, 0.0400, -0.8300, -1.4700, -0.0300, -2.3000, 5.9600, 0.0900, -0.8500, -1.5000, 0.6200, -4.0500, 6.5300, 0.1300, -0.8600, -1.5300, 0.8700, -4.0600, 5.8500, 0.0700, -0.8000, -1.6400, 0.0900, -3.8100, 5.1000, -0.0800, -0.7400, -1.7600, -1.0000, -8.1300, 4.7300, -0.1500, -0.8700, -1.1100, -1.4400, 0.1700, 6.5500, 0.0100, -0.9900, -0.8100
};

// Wrapper for raw input buffer
static signal_t sig;

// Setup function that is called once as soon as the program starts
void setup() {

    // IS THIS NEEDED?
    // Serial.begin(115200)

    // Print something to the terminal
    ei_printf("Static inference test\r\n");

    // Assign callback function to fill buffer used for preprocessing/inference
    sig.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
    sig.get_data = &get_signal_data;

    // ---
    // Formerly in loop()
    // ---
    
    ei_impulse_result_t result; // Used to store inference output
    EI_IMPULSE_ERROR res;       // Return code from inference

    // Perform DSP pre-processing and inference
    res = run_classifier(&sig, &result, false);

    // Print return code and how long it took to perform inference
    ei_printf("run_classifier returned: %d\r\n", res);
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n", 
            result.timing.dsp, 
            result.timing.classification, 
            result.timing.anomaly);

    // Print inference/prediction results
    ei_printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
        ei_printf("%.5f\r\n", result.classification[i].value);
    }
}

// Loop function that is called repeatedly after setup()
void loop() {

    // Just sleep
    ei_sleep(100);
}

// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
    for (size_t i = 0; i < length; i++) {
        out_ptr[i] = (input_buf + offset)[i];
    }

    return EIDSP_OK;
}