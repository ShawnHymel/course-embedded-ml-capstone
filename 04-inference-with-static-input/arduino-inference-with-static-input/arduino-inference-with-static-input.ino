#ifdef ARDUINO
  #include <magic-wand-capstone_inferencing.h>
#endif

// Settings
static const int debug_nn = false;

// Raw features copied from test sample (Edge Impulse > Model testing)
static float input_buf[] = {
  0.5105, 0.2335, 0.0874, -0.1319, -0.2560, 0.5234, 0.9677, 0.1782, -0.1185, 0.1817, -0.2923, 0.4834, 0.9841, 0.1948, -0.0799, 0.5438, -0.3937, 0.4373, 0.9873, 0.0881, -0.0327, 0.9776, -0.4441, 0.4282, 0.9906, -0.0074, -0.0013, 1.2643, -0.4154, 0.4310, 1.0820, -0.0531, 0.0459, 1.4006, -0.1840, 0.4902, 1.0722, -0.0434, 0.1531, 1.3130, -0.0931, 0.5747, 0.8600, -0.0157, 0.1503, 1.1937, -0.0369, 0.6474, 0.6509, 0.0286, 0.1417, 1.0574, 0.0229, 0.6733, 0.5301, 0.0923, 0.1588, 0.9000, 0.0892, 0.6452, 0.4713, 0.1158, 0.1874, 0.7458, 0.1589, 0.5139, 0.4778, 0.1297, 0.2275, 0.4194, 0.1566, 0.4339, 0.5072, 0.1228, 0.2260, 0.2263, 0.1624, 0.3527, 0.5464, 0.1352, 0.2174, 0.0025, 0.1917, 0.2699, 0.5791, 0.1782, 0.1903, -0.2403, 0.2297, 0.1904, 0.6183, 0.2114, 0.1360, -0.4573, 0.2650, -0.0282, 1.6176, 0.1878, -0.2143, -0.7229, 0.2790, -0.0271, 0.3113, 0.2682, -0.0399, -0.7040, 0.1811, -0.0694, 0.6052, 0.2876, -0.1085, -0.6763, 0.2263, -0.1201, 0.6640, 0.3166, -0.1585, -0.6385, 0.2614, -0.2091, 0.6771, 0.3250, -0.1385, -0.4563, 0.2937, -0.2908, 0.7260, 0.2779, -0.1542, -0.1916, 0.2854, -0.3950, 0.6411, 0.2432, -0.1357, -0.0921, 0.2820, -0.4424, 0.6346, 0.2045, -0.1128, 0.0163, 0.2784, -0.4858, 0.6150, 0.1657, -0.1114, 0.0871, 0.2796, -0.5241, 0.6085, 0.1214, -0.0985, 0.1269, 0.2872, -0.5540, 0.6248, 0.0895, -0.1171, 0.1518, 0.2655, -0.6125, 0.6117, 0.0549, -0.1500, 0.1468, 0.2421, -0.6334, 0.5987, 0.0577, -0.1771, 0.1269, 0.2239, -0.6503, 0.5823, 0.0480, -0.2129, 0.1050, 0.2157, -0.6650, 0.5464, 0.0369, -0.2643, 0.0890, 0.2075, -0.6892, 0.4942, 0.0355, -0.3101, 0.0701, 0.1870, -0.7630, 0.3505, -0.0282, -0.3572, 0.0900, 0.1120, -0.8109, 0.2002, -0.1251, -0.4101, 0.1308, 0.0598, -0.8718, 0.1088, -0.2442, -0.4502, 0.2045, 0.0112, -0.9540, 0.1317, -0.3730, -0.4802, 0.3219, -0.0275, -1.0481, 0.1839, -0.4949, -0.5088, 0.4393, -0.0556, -1.1332, 0.3962, -0.7192, -0.5317, 0.5925, -0.1311, -1.2053, 0.5628, -0.8037, -0.5374, 0.6224, -0.1716, -1.1828, 0.7620, -0.8563, -0.5231, 0.6235, -0.2032, -1.1140, 0.9057, -0.8522, -0.5388, 0.5159, -0.2302, -0.9935, 0.8208, -0.8480, -0.6074, 0.3289, -0.2642, -0.8385, 0.5628, -0.8868, -0.7204, 0.2483, -0.3696, -0.6238, 0.2721, -0.9727, -0.7661, 0.3129, -0.4230, -0.6069, 0.2786, -1.0128, -0.7618, 0.3727, -0.4787, -0.6120, 0.2394, -1.0655, -0.7575, 0.4383, -0.5484, -0.6148, 0.2133, -1.1236, -0.7261, 0.4911, -0.6205, -0.6131, 0.1937, -1.1679, -0.6746, 0.4851, -0.7330, -0.5669, 0.0108, -1.2829, -0.5588, 0.4802, -0.7716, -0.5201, -0.0970, -1.3743, -0.5002, 0.4921, -0.8033, -0.4745, -0.1557, -1.4574, -0.4101, 0.4941, -0.8420, -0.4260, -0.1721, -1.5266, -0.2872, 0.4911, -0.8912, -0.3646, -0.1133, -1.5931, -0.1743, 0.5348, -0.9404, -0.2479, 0.1153, -1.6263, 0.0488, 0.5916, -0.9679, -0.1815, 0.2068, -1.6139, 0.1445, 0.5498, -0.9632, -0.0907, 0.2035, -1.5945, 0.2246, 0.5299, -0.9515, 0.0028, 0.1513, -1.5557, 0.3490, 0.5369, -0.9269, 0.0760, 0.0859, -1.5142, 0.4976, 0.5598, -0.8965, 0.1363, 0.0141, -1.4574, 0.8222, 0.6175, -0.8115, 0.1910, -0.0676, -1.4518, 0.9980, 0.6204, -0.7423, 0.1876, -0.0610, -1.4449, 1.1652, 0.5547, -0.6539, 0.1802, -0.0839, -1.4255, 1.2968, 0.4104, -0.5525, 0.1775, -0.1329, -1.3978, 1.3840, 0.2443, -0.4458, 0.1814, -0.1590, -1.3701, 1.4068, -0.0075, -0.1857, 0.1887, -0.0480, -1.2677, 1.3297, -0.0921, -0.0497, 0.1904, 0.0761, -1.1749, 1.2553, -0.1488, 0.0815, 0.2067, 0.1284, -1.0945, 1.1452, -0.1867, 0.1987, 0.2434, 0.0925, -1.0156, 1.0066, -0.2145, 0.3024, 0.2857, 0.0859, -0.9699, 0.8736, -0.2165, 0.4618, 0.3386, 0.1643, -0.8190, 0.5920, -0.1857, 0.5339, 0.3460, 0.1904, -0.7608, 0.4862, -0.1139, 0.5995, 0.3476, 0.1937, -0.7289, 0.4104, -0.0283, 0.6669, 0.3493, 0.1806, -0.7165, 0.3547, 0.0383, 0.7296, 0.3544, 0.1578, -0.6929, 0.2932, 0.0961, 0.7742, 0.3533, 0.1251, -0.6209, 0.2103, 0.1885, 0.8439, 0.3583, 0.0827, -0.5808, 0.1746, 0.2254, 0.8661, 0.3685, 0.0500, -0.5351, 0.1245, 0.2651, 0.8919, 0.3747, -0.0022, -0.4880, 0.0716, 0.3039, 0.9271, 0.3736, -0.0512, -0.4575, 0.0373, 0.3439, 0.9675, 0.3656, -0.1198, -0.4201, -0.0284, 0.3449, 1.0102, 0.3336, -0.1525, -0.3426, -0.0799, 0.3269, 1.0243, 0.3042, -0.1231, -0.3176, -0.1314, 0.2930, 1.0425, 0.2643, -0.0904, -0.3024, -0.2014, 0.2174, 1.0472, 0.2203, -0.0676, -0.2802, -0.2915, 0.1358, 1.0331, 0.1611, -0.0055, -0.2581, -0.3644, -0.0085, 0.9704, 0.0293, 0.1284, -0.2027, -0.4916, -0.0502, 0.9305, -0.0333, 0.1349, -0.1971, -0.5731, -0.0642, 0.8984, -0.0868, 0.1186, -0.2027, -0.6560, -0.0623, 0.8807, -0.1386, 0.1382, -0.2235, -0.7218, -0.0324, 0.8579, -0.1877, 0.0925, -0.2913, -0.8061, 0.0124, 0.8157, -0.2875, 0.1251, -0.5032, -0.8933, 0.1308, 0.7238, -0.3511, 0.1970, -0.6251, -0.9234, 0.1089, 0.6845, -0.4035, 0.3047, -0.7220, -0.9377, 0.0124, 0.6265, -0.4345, 0.4158, -0.8079, -0.9591, -0.0931, 0.5514, -0.4333, 0.4876, -0.8840, -0.9791, -0.1726, 0.4846, -0.4052, 0.6281, -1.0004, -0.9834, -0.2781, 0.3938, -0.2931, 0.6313, -1.0267, -0.9848, -0.3130, 0.3511, -0.2328, 0.6215, -1.0405, -0.9677, -0.3548, 0.3018, -0.1724, 0.6183, -1.0585, -0.9248, -0.3637, 0.2403, -0.1195, 0.6477, -1.0696, -0.8676, -0.3160, 0.1776, -0.0807
};

// Wrapper for raw input buffer
static signal_t signal;

// Setup function that is called once as soon as the program starts
void setup() {

    // IS THIS NEEDED?
    // Serial.begin(115200)

    // Print something to the terminal
    ei_printf("Static inference test\r\n");

    // Assign callback function to fill buffer used for preprocessing/inference
    signal.total_length = EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE;
    signal.get_data = &get_signal_data;
}

// Loop function that is called repeatedly after setup()
void loop() {

    ei_impulse_result_t result; // Used to store inference output
    EI_IMPULSE_ERROR res;       // Return code from inference

    // Perform DSP pre-processing and inference
    res = run_classifier(&signal, &result, false);

    // Print return code and how long it took to perform inference
    ei_printf("run_classifier returned: %d\r\n", res);
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n", 
            result.timing.dsp, 
            result.timing.classification, 
            result.timing.anomaly);

    // Print inference/prediction results
    ei_printf("Predictions:\r\n");
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
        ei_printf("%.5f\r\n", result.classification[i].value);
    }

    // Wait 100 ms before running inference again
    ei_sleep(100);
}

// Callback: fill a section of the out_ptr buffer when requested
static int get_signal_data(size_t offset, size_t length, float *out_ptr) {
    for (size_t i = 0; i < length; i++) {
        out_ptr[i] = (input_buf + offset)[i];
    }

    return EIDSP_OK;
}
